#!/usr/bin/env python3

PACKAGE = "robot_faces"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()



"""
Misc
"""
misc_group = gen.add_group("Misc")

misc_group.add("background_colour",  str_t, 0, "Comma delimited RGBA string of the background", "255,255,255,255")
misc_group.add("window_width",       int_t, 0, "Width of the window in px", 800, 10, 10000)
misc_group.add("window_height",      int_t, 0, "Height of the window in px", 600, 10, 10000)
misc_group.add("face_center",        double_t, 0, "Center of the face as a percetange of height", 0.5, 0.0, 1.0)



"""
Eyebrows
"""

eyebrows_group = gen.add_group("Eyebrows")

eyebrow_shape = gen.enum([gen.const("Rectangular_Eyebrow",  int_t, 0, "Rectangular shaped eyebrows"),
                        gen.const("Square_Eyebrow",         int_t, 1, "Square eyebrows"),
                        gen.const("Rounded_Eyebrow",        int_t, 2, "Rounded eyebrows"),
                        gen.const("Straight_Eyebrow",       int_t, 3, "Straight eyebrows"),
                        gen.const("Arch_Eyebrow",           int_t, 4, "Highly arched eyebrows"),
                        gen.const("Arc_Eyebrow",            int_t, 5, "Eyebrows in the shape of a circular arc")], "An enum representing the shape of the eyebrows")
eyebrows_group.add("eyebrow_shape",         int_t, 0, "The shape of eyebrows", 5, 0, 5, edit_method=eyebrow_shape)
eyebrows_group.add("eyebrow_spacing",       double_t, 0, "Spacing between eyes and eyebrows as a percetange of height", -0.2, -1.0, 1.0)
eyebrows_group.add("eyebrow_scaling_x",     double_t, 0, "X-scaling of the eyebrows", 1.0, 0.0, 10.0)
eyebrows_group.add("eyebrow_scaling_y",     double_t, 0, "Y-xscaling of the eyebrows", 1.0, 0.0, 10.0)
eyebrows_group.add("eyebrow_colour",        str_t, 0, "Comma delimited RGBA string of the eyebrows", "34,27,7,255")
eyebrows_group.add("show_eyebrows",         bool_t, 0, "Whether to render the eyebrows", True)


"""
Eyes
"""

eyes_group = gen.add_group("Eyes")

eyes_group.add("avg_blink_interval",        int_t,  0, "Average ms between blinks", 3000, 1000, 20000)
eyes_group.add("should_blink",              bool_t, 0, "Whether or not to blink", True)
eyes_group.add("should_do_saccades",        bool_t, 0, "Whether or not to do saccades", True)
eyes_group.add("eye_spacing",       double_t, 0, "Spacing between eyes as a percetange of width", 0.5, 0.0, 1.0)
eyes_group.add("eye_y",             double_t, 0, "Height of eyes from face center as a percetange of height", -0.25, -1.0, 1.0)

eyes_group.add("show_pupil_highlights",    bool_t, 0, "Whether to render pupil highlights", True)
eyes_group.add("pupil_scaling_x",     double_t, 0, "X-scaling of the pupil", 1.0, 0.0, 10.0)
eyes_group.add("pupil_scaling_y",     double_t, 0, "Y-scaling of the pupil", 1.0, 0.0, 10.0)
eyes_group.add("pupil_squircle_radius_x",    double_t, 0, "Radius of squircle pupil", 1.0, 0.0, 1.0)
eyes_group.add("pupil_squircle_radius_y",    double_t, 0, "Radius of squircle pupil", 1.0, 0.0, 1.0)
eyes_group.add("pupil_colour",      str_t, 0, "Comma delimited RGBA string of the pupil", "0,0,0,255")
eyes_group.add("show_pupil",        bool_t, 0, "Whether to render the pupils", True)

iris_shape = gen.enum([gen.const("Thick_Iris",          int_t, 0, "Thick/ deep eyes"),
                        gen.const("Oval_Iris",          int_t, 1, "Oval shaped eyes"),
                        gen.const("Almond_Iris",        int_t, 2, "Humanlike, almond shaped eyes"),
                        gen.const("Arc_Iris",           int_t, 3, "Eyes in the shape of an inverted arc"),
                        gen.const("Rectangular_Iris",   int_t, 4, "A rounded rectangle")], "An enum representing the shape of the iris")
eyes_group.add("iris_shape",        int_t, 0, "The shape of iris", 4, 0, 4, edit_method=iris_shape)
eyes_group.add("iris_scaling_x",     double_t, 0, "X-scaling of the iris", 1.0, 0.0, 10.0)
eyes_group.add("iris_scaling_y",     double_t, 0, "Y-scaling of the iris", 1.0, 0.0, 10.0)
eyes_group.add("iris_squircle_radius_x",    double_t, 0, "Radius of squircle iris", 1.0, 0.0, 1.0)
eyes_group.add("iris_squircle_radius_y",    double_t, 0, "Radius of squircle iris", 1.0, 0.0, 1.0)
eyes_group.add("iris_colour",       str_t, 0, "Comma delimited RGBA string of the iris", "139,69,19,255")
eyes_group.add("show_iris",         bool_t, 0, "Whether to render the iris", True)



"""
Nose
"""
nose_group = gen.add_group("Nose")

nose_shape = gen.enum([gen.const("Annulus_Nose",        int_t, 0, "A nose in the shape of a ring"),
                        gen.const("Curve_Nose",         int_t, 1, "A nose in the shape of a curve"),
                        gen.const("Animal_Nose",        int_t, 2, "A nose in the shape of an inverted triangle"),
                        gen.const("Squircle_Nose",      int_t, 3, "Somehwere between a rectangle and ellipse")], "An enum representing the shape of the nose")
nose_group.add("nose_shape",                int_t, 0, "The shape of nose", 3, 0, 3, edit_method=nose_shape)
nose_group.add("nose_y",                    double_t, 0, "Height of nose from face center between eyes as a percetange of height", 0.0, -1.0, 1.0)
nose_group.add("nose_squircle_radius_x",    double_t, 0, "Radius of squircle nose", 1.0, 0.0, 1.0)
nose_group.add("nose_squircle_radius_y",    double_t, 0, "Radius of squircle nose", 1.0, 0.0, 1.0)
nose_group.add("nose_scaling_x",            double_t, 0, "X-scaling of the nose", 1.0, 0.0, 10.0)
nose_group.add("nose_scaling_y",            double_t, 0, "Y-scaling of the nose", 1.0, 0.0, 10.0)
nose_group.add("nose_colour",               str_t, 0, "Comma delimited RGBA string of the nose", "41,41,41,255")
nose_group.add("show_nose",                 bool_t, 0, "Whether to render the nose", True)


"""
Mouth
"""

mouth_group = gen.add_group("Mouth")

mouth_shape = gen.enum([gen.const("Squircle_Mouth",     int_t, 0, "Somehwere between a rectangle and ellipse"),
                        gen.const("Line_Mouth",         int_t, 1, "A nose in the shape of a line")], "An enum representing the shape of the mouth")
mouth_group.add("mouth_shape",              int_t, 0, "The shape of mouth", 1, 0, 1, edit_method=mouth_shape)
mouth_group.add("mouth_y",                  double_t, 0, "Height of mouth from face center as a percetange of height", 0.25, -1.0, 1.0)
mouth_group.add("mouth_squircle_radius_x",  double_t, 0, "Radius of squircle mouth", 0.2, 0.0, 1.0)
mouth_group.add("mouth_squircle_radius_y",  double_t, 0, "Radius of squircle mouth", 0.2, 0.0, 1.0)
mouth_group.add("mouth_scaling_x",          double_t, 0, "X-scaling of the mouth", 1.0, 0.0, 10.0)
mouth_group.add("mouth_scaling_y",          double_t, 0, "Y-scaling of the mouth", 1.0, 0.0, 10.0)
mouth_group.add("mouth_colour",             str_t, 0, "Comma delimited RGBA string of the mouth", "0,0,0,255")
mouth_group.add("show_mouth",               bool_t, 0, "Whether to render the mouth", True)



exit(gen.generate(PACKAGE, PACKAGE, "Parameters"))
